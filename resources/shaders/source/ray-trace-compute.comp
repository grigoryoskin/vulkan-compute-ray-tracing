#version 450

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout(set = 0, binding = 0, rgba8) uniform image2D img;

#define LIGHT_MATERIAL 0
#define LAMBERTIAN_MATERIAL 1
#define METAL_MATERIAL 2
#define GLASS_MATERIAL 3

struct material {
    uint materialType;
    vec3 albedo;
};

struct triangle {
    vec3 v0;
    vec3 v1;
    vec3 v2;
    uint materialIndex;
};

struct light {
    uint triangleIndex;
    float area;
};

struct sphere {
    vec4 s;
    uint materialIndex;
};

struct bvhNode {
    vec3 min;
    vec3 max;
    int leftNodeIndex;
    int rightNodeIndex;
    int objectIndex;
};

struct onb {
    vec3 u;
    vec3 v;
    vec3 w;
};

onb Onb(vec3 n) {
    onb res;
    res.w = normalize(n);
    vec3 a = (abs(res.w.x) > 0.9) ? vec3(0,1,0) : vec3(1,0,0);
    res.v = normalize(cross(res.w, a));
    res.u = cross(res.w, res.v);
    return res;
}

vec3 onbLocal(vec3 a, onb o) {
    return a.x * o.u + a.y * o.v + a.z * o.w;
}

layout(binding = 1) uniform UniformBufferObject {
    vec3 camPos;
    float time;
    uint currentSample;
} ubo;

layout(binding = 2) readonly buffer TriangleBufferObject {
    triangle[] triangles;
 };

 layout(binding = 3) readonly buffer MaterialBufferObject {
    material[] materials;
 };

layout(binding = 4) readonly buffer AabbBufferObject {
    bvhNode[] bvh;
 };

layout(binding = 5) readonly buffer LightsBufferObject {
    light[] lights;
 };

 layout(binding = 6) readonly buffer SpheresBufferObject {
    sphere[] spheres;
 };

const float pi = 3.1415926535897932385;

// Random number generation using pcg32i_random_t, using inc = 1. Our random state is a uint.
uint stepRNG(uint rngState)
{
  return rngState * 747796405 + 1;
}

// Steps the RNG and returns a floating-point value between 0 and 1 inclusive.
float stepAndOutputRNGFloat(inout uint rngState)
{
  // Condensed version of pcg_output_rxs_m_xs_32_32, with simple conversion to floating-point [0,1].
  rngState  = stepRNG(rngState);
  uint word = ((rngState >> ((rngState >> 28) + 4)) ^ rngState) * 277803737;
  word      = (word >> 22) ^ word;
  return float(word) / 4294967295.0f;
}

uint rngState =  (600 * gl_GlobalInvocationID.x + gl_GlobalInvocationID.y) * (ubo.currentSample+1);
float random() {
    return stepAndOutputRNGFloat(rngState);
}

float random(float min, float max) {
    // Returns a random real in [min,max).
    return min + (max-min)*random();
}

vec3 random_in_unit_sphere() {
    vec3 p = vec3(random(-0.3,0.3),random(-0.3,0.3),random(-0.3,0.3));
    return normalize(p);
}

vec3 random_in_hemisphere(vec3 normal) {
    vec3 in_unit_sphere = random_in_unit_sphere();
    if (dot(in_unit_sphere, normal) > 0.0) // In the same hemisphere as the normal
        return in_unit_sphere;
    else
        return -in_unit_sphere;
}

vec3 random_cosine_direction() {
    float r1 = random();
    float r2 = random();
    float z = sqrt(1-r2);

    float phi = 2*pi*r1;
    float x = cos(phi)*sqrt(r2);
    float y = sin(phi)*sqrt(r2);

    return vec3(x, y, z);
}

struct ray {
    vec3 origin;
    vec3 dir;
};

vec3 ray_at(ray r, float t) {
    return r.origin + t * r.dir;
}

struct hit_record {
    vec3 p;
    vec3 normal;
    uint materialIndex;
    float t;
    // integer to decrease branches.
    int backFaceInt;
    // PDF of scattering in given direction due to material properties.
    float scatterPdf;
    // PDF of sampling in given direction.
    float samplePdf;

};

vec3 randomOnATriangle(uint triangleIndex) {
    float s = random();
    float t = random();

    vec3 v01 = - triangles[triangleIndex].v0 + triangles[triangleIndex].v1;
    vec3 v02 = - triangles[triangleIndex].v0 + triangles[triangleIndex].v2;
    return triangles[triangleIndex].v0 + s * v01 + t * v02;
}

vec3 sampleLight(vec3 p, inout float pdf, inout float lightCosine) {
    int lightIndex = int(floor(lights.length() * random()));
    vec3 onLight = randomOnATriangle(lights[lightIndex].triangleIndex);
    vec3 toLight = onLight - p;
    float distanceSquared = dot(toLight, toLight);
    toLight = normalize(toLight);
    lightCosine = abs(toLight.y);

    // This assumes that all lights have the same area. 
    // TODO: Calculate probability for arbitrary light area.
    pdf = distanceSquared / (lights.length() * lightCosine * lights[lightIndex].area);

    return toLight;
}

vec3 sampleLambertian(vec3 normal, inout float pdf) {
    onb uvw = Onb(normal);
    vec3 randomCos = random_cosine_direction();
    vec3 randomCosScattered = normalize(onbLocal(randomCos, uvw));
    float cosine = dot(normalize(normal), randomCosScattered);
    pdf = max(0.01, cosine)/pi;
    
    return randomCosScattered;
}

vec3 sampleMetal(vec3 I, vec3 normal, inout float pdf) {
    pdf = 1;
    return reflect(I, normal);
}

vec3 sampleGlass(vec3 I, hit_record rec, inout float pdf) {
    pdf = 1;
    float ir = 1.5;
    float refraction_ratio = (1 - rec.backFaceInt) * 1.0/ir + rec.backFaceInt * ir; 
    vec3 i = normalize(I);
    float cos_theta = min(dot(-i, rec.normal), 1.0);
    float sin_theta = sqrt(1.0 - cos_theta*cos_theta);
    float t = floor(clamp(refraction_ratio * sin_theta, 0, 1));

    return t*reflect(i, rec.normal) + (1-t)*refract(i, rec.normal, refraction_ratio);
}

bool scatter(ray r_in, inout hit_record rec, inout vec3 albedo, inout ray scattered) {    
    albedo = materials[rec.materialIndex].albedo;
    //float lightSamplePdf;

    float materialSamplePdf;
    vec3 materialSample;

    if(materials[rec.materialIndex].materialType == LAMBERTIAN_MATERIAL) {
        materialSample = sampleLambertian(rec.normal, materialSamplePdf);
    }
    else if(materials[rec.materialIndex].materialType == METAL_MATERIAL) {
        materialSample = sampleMetal(r_in.dir, rec.normal, materialSamplePdf);
    }
    else if(materials[rec.materialIndex].materialType == GLASS_MATERIAL) {
        materialSample = sampleGlass(r_in.dir, rec, materialSamplePdf);
        albedo = vec3(1.0);
    }
    float lightSamplePdf = materialSamplePdf; 
    vec3 finalSample = materialSample;

    if (random() < 0.5 && materials[rec.materialIndex].materialType == LAMBERTIAN_MATERIAL) {
        // sample light
        float lightCosine;
        finalSample = sampleLight(rec.p, lightSamplePdf, lightCosine);

        if(abs(lightCosine) < 0.001) {
            finalSample = materialSample;
            lightSamplePdf = materialSamplePdf;
        }
    }

    scattered = ray(rec.p, finalSample);
    
    rec.samplePdf = 0.5 * materialSamplePdf + 0.5 *lightSamplePdf;
    rec.scatterPdf = materialSamplePdf;

    return materials[rec.materialIndex].materialType == LIGHT_MATERIAL;
}

vec3 triIntersect( in vec3 ro, in vec3 rd, triangle tri, inout vec3 n )
{
    vec3 a = tri.v0 - tri.v1;
    vec3 b = tri.v2 - tri.v0;
    vec3 p = tri.v0 - ro;
    n = cross( b, a );

    vec3 q = cross( p, rd );

    float idet = 1.0/dot( rd, n );

    float u = dot( q, b )*idet;
    float v = dot( q, a )*idet;
    float t = dot( n, p )*idet;

    return vec3( t, u, v );
}

bool hit_sphere(int sphere_index, ray r, float tMin, float tMax, inout hit_record rec) {
    vec3 center = spheres[sphere_index].s.xyz;
    float radius = spheres[sphere_index].s.w;

    float dir_l = r.dir.length();
    
    vec3 oc = r.origin - center;
    float a = dot(r.dir, r.dir);
    float half_b = dot(oc, r.dir);
    float c = dot(oc, oc) - radius*radius;

    float discriminant = half_b*half_b - a*c;
    if (discriminant < 0) return false;
    float sqrtd = sqrt(discriminant);
    rec.backFaceInt = 0;
    // Find the nearest root that lies in the acceptable range.
    float root = (-half_b - sqrtd) / a;
    if (root < tMin || tMax < root) {
        root = (-half_b + sqrtd) / a;
        rec.backFaceInt = 1;
        if (root < tMin || tMax < root)
            return false;
    }
    rec.t = root;
    rec.p = ray_at(r, rec.t);
    rec.normal = (1 - 2 * rec.backFaceInt)*(rec.p - center) / radius;
    rec.materialIndex = spheres[sphere_index].materialIndex;
    return true;
}

bool hit_triangle(int triangle_index, ray r, float tMin, float tMax, inout hit_record rec) {
    triangle t = triangles[triangle_index];
    vec3 n = vec3(0,0,0);
    vec3 hit = triIntersect(r.origin, r.dir, t, n);
    if (!( hit.y<0.0 || hit.y>1.0 || hit.z<0.0 || (hit.y+hit.z)>1.0 )) {
        rec.p = r.origin + hit.x * r.dir;
        rec.normal =  normalize(n);
        rec.backFaceInt = dot(r.dir,rec.normal) > 0 ? 1 : 0;
        rec.normal *=  1 - 2 * rec.backFaceInt;
        //rec.p +=  rec.normal*0.0001;
        rec.t = hit.x;
        rec.materialIndex = t.materialIndex;
        return hit.x > tMin && hit.x < tMax;
    }
    return false;
}

bool hit_scene(ray r, inout hit_record rec) {
    float t_min = 0.001;
    float t_max = 10000;

    hit_record temp_rec;
    bool hit_anything = false;
    float closest_so_far = t_max;
    for (int i = 0; i<triangles.length(); i++) {
        if (hit_triangle(i, r, t_min, closest_so_far, temp_rec)) {
            hit_anything = true;
            closest_so_far = temp_rec.t;
            rec = temp_rec;
        }
    }
    closest_so_far = t_max;

    for (int j = 0; j<spheres.length(); j++) {
        if (hit_sphere(j, r, t_min, closest_so_far, temp_rec)) {
            hit_anything = true;
            closest_so_far = temp_rec.t;
            rec = temp_rec;
        }
    }

    return hit_anything;
}

// no intersection means vec.x > vec.y (really tNear > tFar)
vec2 intersectAABB(ray r, vec3 boxMin, vec3 boxMax) {
    vec3 tMin = (boxMin - r.origin) / r.dir;
    vec3 tMax = (boxMax - r.origin) / r.dir;
    vec3 t1 = min(tMin, tMax);
    vec3 t2 = max(tMin, tMax);
    float tNear = max(max(t1.x, t1.y), t1.z);
    float tFar = min(min(t2.x, t2.y), t2.z);
    return vec2(tNear, tFar);
}

// Works only for triangles, no spheres yet.
// TODO: extend for spheres.
bool hit_bvh(ray r, inout hit_record rec) {
    float tmin = 0.01;
    
    int nodeStack[16];
    int stackIndex = 0;
    
    nodeStack[stackIndex] = 0;
    stackIndex++;
    while (stackIndex>0 && stackIndex<16) {
        int currentNode = nodeStack[stackIndex-1];
        stackIndex = stackIndex-1;
        int leftChild = bvh[currentNode].leftNodeIndex;
        int rigthChild = bvh[currentNode].rightNodeIndex;

        vec2 tIntersect = intersectAABB(r, bvh[currentNode].min, bvh[currentNode].max);
        if (tIntersect.x < tIntersect.y) {
            bool leaf = bvh[currentNode].objectIndex != -1;

            if(leaf) {
                if(hit_triangle(bvh[currentNode].objectIndex, r, tmin, tIntersect.y + 0.1, rec)) {
                    return true;
                }
            } 

            nodeStack[stackIndex] = leftChild;
            stackIndex++;
            nodeStack[stackIndex] = rigthChild;
            stackIndex++;
        } 
    }
    
    return false;
}

vec3 ray_color(ray r) {
    vec3 unit_direction = normalize(r.dir);
    hit_record rec;

    vec3 final_color = vec3(1.0);
    ray current_ray = {r.origin, r.dir};
    
    int bounces = 4;
    for (int i = 0; i< bounces; i++) {
        if (hit_scene(current_ray, rec)) {
            vec3 albedo;
            bool emits = scatter(current_ray, rec, albedo, current_ray);
            if (emits) {
                final_color *= albedo;
                break;
            }
            final_color *= albedo * rec.scatterPdf / rec.samplePdf;
            
        } else {
            final_color *= 0.0;
            //float t = 0.5*(unit_direction.y + 1.0);
            //final_color *= (1.0-t)*vec3(1.0, 1.0, 1.0) + t*vec3(1.0, 0.1, 1.0);
            break;

        }
    }
    return final_color;
    
    //Leave this out for debug :)
    /*
    if (hit_bvh(r, rec)) {
        vec3 attenuation;
        bool emits = scatter(current_ray, rec, attenuation, current_ray);
        return current_ray.dir;
    } else {
        return vec3(0.3);
    }
*/    
}

void main()
{   
    // Image
    vec2 imageSize = vec2(imageSize(img));

    // Camera
    float vfov = 30;
    float theta = vfov * pi / 180.0;
    float h = tan(theta/2);
    float viewport_height = 2.0 * h;
    float viewport_width = imageSize.x / imageSize.y * viewport_height;
    float focal_length = 1.0;

    vec3 horizontal = vec3( viewport_width, 0,  0);
    vec3 vertical = vec3(0, -viewport_height, 0);

    vec3 origin = ubo.camPos.zxy * vec3(-1, 1, 1);
    vec3 lower_left_corner = origin - horizontal/2 - vertical/2 - vec3(0, 0, focal_length);

    vec2 uv = (gl_GlobalInvocationID.xy) / imageSize.xy;
    ray r = {origin, lower_left_corner + uv.x*horizontal + uv.y*vertical - origin};
    vec3 pixel_color = ray_color(r);

    vec4 currentColor = imageLoad(img, ivec2(gl_GlobalInvocationID.xy)).rgba;
    vec4 to_write = (vec4(pixel_color, 1.0) + currentColor*(ubo.currentSample))/(ubo.currentSample + 1);

    imageStore(img, ivec2(gl_GlobalInvocationID.xy), to_write);
}