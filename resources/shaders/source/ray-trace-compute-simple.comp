#version 450

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

// Include definitions for ubo, triangle, material, etc.
#include "include/definitions.glsl"

layout(binding = 0) uniform UniformBufferObject {
    vec3 camPos;
    float time;
    uint currentSample;
    uint numTriangles;
    uint numLights;
    uint numSpheres;
} ubo;

layout(binding = 1, rgba8) uniform image2D targetTexture;

layout(binding = 2, rgba8) uniform image2D accumulationTex;

layout(std430, binding = 3) readonly buffer TriangleBufferObject {
    triangle[] triangles;
 };

 layout(std430, binding = 4) readonly buffer MaterialBufferObject {
    material[] materials;
 };

layout(std430, binding = 5) readonly buffer AabbBufferObject {
    bvhNode[] bvh;
 };

layout(std430, binding = 6) readonly buffer LightsBufferObject {
    light[] lights;
 };

 layout(std430, binding = 7) readonly buffer SpheresBufferObject {
    sphere[] spheres;
 };
 
// Random functions
 #include "include/random.glsl"

struct ray {
    vec3 origin;
    vec3 dir;
};

vec3 ray_at(ray r, float t) {
    return r.origin + t * r.dir;
}

struct hit_record {
    vec3 p;
    vec3 normal;
    uint materialIndex;
    float t;
    // representing whetether backface or not with an integer to decrease branches.
    int backFaceInt;
};

bool scatter(ray r_in, inout hit_record rec, inout vec3 albedo, inout ray scattered) {    
    albedo = materials[rec.materialIndex].albedo;

    scattered = ray(rec.p, normalize(random_in_hemisphere(rec.normal)));
    
    return materials[rec.materialIndex].materialType == LIGHT_MATERIAL;
}

vec3 triIntersect( in vec3 ro, in vec3 rd, triangle tri, inout vec3 n )
{
    vec3 a = tri.v0 - tri.v1;
    vec3 b = tri.v2 - tri.v0;
    vec3 p = tri.v0 - ro;
    n = cross( b, a );

    vec3 q = cross( p, rd );

    float idet = 1.0/dot( rd, n );

    float u = dot( q, b )*idet;
    float v = dot( q, a )*idet;
    float t = dot( n, p )*idet;

    return vec3( t, u, v );
}

bool hit_triangle(int triangle_index, ray r, float tMin, float tMax, inout hit_record rec) {
    triangle t = triangles[triangle_index];
    vec3 n = vec3(0,0,0);
    vec3 hit = triIntersect(r.origin, r.dir, t, n);
    if (!( hit.y<0.0 || hit.y>1.0 || hit.z<0.0 || (hit.y+hit.z)>1.0 )) {
        rec.p = r.origin + hit.x * r.dir;
        rec.normal =  normalize(n);
        rec.backFaceInt = dot(r.dir,rec.normal) > 0 ? 1 : 0;
        rec.normal *=  1 - 2 * rec.backFaceInt;
        rec.p +=  rec.normal*0.0001;
        rec.t = hit.x;
        rec.materialIndex = t.materialIndex;
        return hit.x > tMin && hit.x < tMax;
    }
    return false;
}

// Hit scene without bvh.
bool hit_scene(ray r, inout hit_record rec) {
    float t_min = 0.001;
    float t_max = 10000;

    hit_record temp_rec;
    bool hit_anything = false;
    float closest_so_far = t_max;
    for (int i = 0; i<ubo.numTriangles; i++) {
        if (hit_triangle(i, r, t_min, closest_so_far, temp_rec)) {
            hit_anything = true;
            closest_so_far = temp_rec.t;
            rec = temp_rec;
        }
    }

    return hit_anything;
}

// no intersection means vec.x > vec.y (really tNear > tFar)
vec2 intersectAABB(ray r, vec3 boxMin, vec3 boxMax) {
    vec3 tMin = (boxMin - r.origin) / r.dir;
    vec3 tMax = (boxMax - r.origin) / r.dir;
    vec3 t1 = min(tMin, tMax);
    vec3 t2 = max(tMin, tMax);
    float tNear = max(max(t1.x, t1.y), t1.z);
    float tFar = min(min(t2.x, t2.y), t2.z);
    return vec2(tNear, tFar);
}

// Works only for triangles, no spheres yet.
// TODO: extend for spheres.
#define MAX_STACK_DEPTH 16
bool hit_bvh(ray r, inout hit_record rec) {
    float t_min = 0.001;
    float t_max = 10000;

    bool hit_anything = false;
    float closest_so_far = t_max;
    
    //Since shader doesn't have a stack structure, implementing it with an array and a counter.
    int nodeStack[MAX_STACK_DEPTH];
    int stackIndex = 0;

    // Traversing a flattened bvh using a stack.
    // nodeStack[stackIndex] contains an index of AABB in bhv[]
    // bvh[nodeStack[stackIndex]] is an index of a triangle in triangles.
    nodeStack[stackIndex] = 0;
    stackIndex++;

    while (stackIndex>0 && stackIndex < MAX_STACK_DEPTH) {
        stackIndex--;
        int currentNode = nodeStack[stackIndex];
        if(currentNode == -1) continue;

        vec2 tIntersect = intersectAABB(r, bvh[currentNode].min, bvh[currentNode].max);
        if (tIntersect.x > tIntersect.y) continue;
        
        // Idndex of triangle in current node.
        int ti = bvh[currentNode].objectIndex;
        if(ti != -1){
            hit_record temp_rec;
            if (hit_triangle(ti, r, t_min, closest_so_far, temp_rec)) {
                hit_anything = true;
                closest_so_far = temp_rec.t;
                rec = temp_rec;
            }
        }

        // Pushing both left unto the stack even if they are -1 to reduce branches. 
        // if (bvh[currentNode].leftNodeIndex != -1) {
        nodeStack[stackIndex] = bvh[currentNode].leftNodeIndex;
        stackIndex++;
        //}
        // if (bvh[currentNode].rightNodeIndex != -1) {
        nodeStack[stackIndex] = bvh[currentNode].rightNodeIndex;
        stackIndex++;
        //}
    }
    
    return hit_anything;
}

#define NUM_BOUNCES 4
vec3 ray_color(ray r) {
    vec3 unit_direction = normalize(r.dir);
    hit_record rec;

    vec3 final_color = vec3(1.0);
    ray current_ray = {r.origin, normalize(r.dir)};
    
    for (int i = 0; i< NUM_BOUNCES; i++) {
        //if (hit_scene(current_ray, rec)) {
        if (hit_bvh(current_ray, rec)) {
            vec3 albedo;
            bool emits = scatter(current_ray, rec, albedo, current_ray);
            final_color *= albedo;
            if (emits) {
                break;
            }            
        } else {
            final_color *= 0.0;
            //float t = 0.5*(unit_direction.y + 1.0);
            //final_color *= (1.0-t)*vec3(1.0, 1.0, 1.0) + t*vec3(1.0, 0.1, 1.0);
            break;

        }
    }
    return final_color;
    
    //Leave this out for debug :)
    /*
    if (hit_bvh(r, rec)) {
        vec3 attenuation;
        bool emits = scatter(current_ray, rec, attenuation, current_ray);
        return current_ray.dir;
    } else {
        return vec3(0.3);
    }
*/    
}

void main()
{   
    // Image
    vec2 imageSize = vec2(imageSize(targetTexture));

    // Camera
    float vfov = 30;
    float theta = vfov * pi / 180.0;
    float h = tan(theta/2);
    float viewport_height = 2.0 * h;
    float viewport_width = imageSize.x / imageSize.y * viewport_height;
    float focal_length = 1.0;

    vec3 horizontal = vec3( viewport_width, 0,  0);
    vec3 vertical = vec3(0, -viewport_height, 0);

    vec3 origin = ubo.camPos.zxy * vec3(-1, 1, 1);
    vec3 lower_left_corner = origin - horizontal/2 - vertical/2 - vec3(0, 0, focal_length);

    vec2 uv = (gl_GlobalInvocationID.xy) / imageSize.xy;
    ray r = {origin, lower_left_corner + uv.x*horizontal + uv.y*vertical - origin};
    vec3 pixel_color = ray_color(r);

    // Adding current ray color to existing color in the accumulation texture.
    
    vec4 currentColor = imageLoad(accumulationTex, ivec2(gl_GlobalInvocationID.xy)).rgba * min(ubo.currentSample, 1.0);

    vec4 to_write = (vec4(pixel_color, 1.0) + currentColor*(ubo.currentSample)) / (ubo.currentSample+1.0);

    imageStore(targetTexture, ivec2(gl_GlobalInvocationID.xy), to_write);
}